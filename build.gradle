import java.time.format.DateTimeFormatter
import java.time.format.DateTimeParseException
import java.util.regex.Pattern

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'shopIT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'jakarta.validation:jakarta.validation-api'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'org.flywaydb:flyway-core:10.13.0'

//	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

//	implementation 'io.jsonwebtoken:jjwt:0.12.5'
//	implementation 'org.springframework.security:spring-security-oauth2-resource-server:6.2.4'
//	implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'
//	implementation 'org.springframework.boot:spring-boot-configuration-processor:3.2.5'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'

	compileOnly 'org.projectlombok:lombok'
	compileOnly "org.mapstruct:mapstruct:1.5.3.Final"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.13.0'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.3.Final"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// TODO: Configure groovy (spock) for service level tests
//	testImplementation 'org.codehaus.groovy:groovy-all'
//	testImplementation 'org.spockframework:spock-junit4'
//	testImplementation 'org.spockframework:spock-spring'
//	testImplementation 'org.spockframework:spock-core'
}

tasks.named('test') {
	useJUnitPlatform()
}

def migrationExclusions = [/* migration names exclusions */]

task validateFlywayMigrations {
	def migrationPattern = "^V\\d{4}\\.\\d{2}\\.\\d{2}\\.\\d{2}\\.\\d{2}__[a-z_]+\\.sql\$"
	def datePattern = Pattern.compile("\\d{4}\\.\\d{2}\\.\\d{2}")

	doLast {
		for (def file in fileTree('src/main/resources/db/migration')) {
			final String migrationName = file.getName()
			if (!file.isFile() || migrationExclusions.contains(migrationName)) {
				continue
			}
			if (!migrationName.matches(migrationPattern)) {
				throw new GradleException("Migration '$migrationName' does not match pattern '$migrationPattern'")
			}
			def matcher = datePattern.matcher(migrationName)
			if (matcher.find()) {
				def date = matcher.group()
				try {
					LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy.MM.dd"))
				} catch (DateTimeParseException e) {
					throw new GradleException(
							"Migration '$migrationName' has invalid date value. Couldn't be parsed with pattern 'yyyy.MM.dd'",
							e
					)
				}
			} else {
				throw new GradleException("Migration '$migrationName' has no date by pattern '$datePattern'")
			}
		}
	}
}

compileJava.dependsOn validateFlywayMigrations